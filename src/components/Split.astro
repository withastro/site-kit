---
import type { CSSLength } from '../utils/css.js'
import { parseCssLength } from '../utils/css.js'
import { uid } from '../utils/uid.js'
import type { Props as BaseProps } from './BaseComponent.astro'
import Component from './BaseComponent.astro'

export type Props = BaseProps & {
	fraction?: `${number}/${number}` | `${number} / ${number}` | 'auto-start' | 'auto-end'
	threshold?: CSSLength
}

const FRACTION_PATTERN = /(?:[1-9][0-9]*|0).?\/.?[1-9][0-9]*/g
function getFraction(value: Props['fraction']) {
	if (!value) {
		return '1fr 1fr'
	} else if (value.match(FRACTION_PATTERN)) {
		const [start, end] = value.split('/')
		const startNum = parseInt(start)
		const endNum = parseInt(end)
		return `${startNum / endNum}fr ${(endNum - startNum) / endNum}fr`
	} else if (value === 'auto-start') {
		return 'auto 1fr'
	} else if (value === 'auto-end') {
		return '1fr auto'
	} else {
		return '1fr 2fr'
	}
}

const {
	id = uid(),
	fraction = '1/2',
	threshold = '0px',
	class: className = '',
	...attrs
} = Astro.props

const safeFraction = getFraction(fraction)
const safeThreshold = parseCssLength(threshold)
const inlineStyle = `
    @media (min-width: ${safeThreshold}) {
        #${id} {
            grid-template-columns: ${safeFraction};
        }
    }
`
---

<Component id={id} class:list={['split', className]} {...attrs}>
	<slot />
</Component>

<style is:global set:html={inlineStyle}></style>

<style>
	.split {
		display: grid;
		grid-template-columns: 1fr;
	}
</style>
