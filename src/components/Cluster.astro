---
import { joinStyles } from "../utils/styles.js"
import { uid } from "../utils/uid.js"
import type { Props as BaseProps } from "./BaseComponent.astro"
import Component from "./BaseComponent.astro"
import Show from "./Show.astro"

export type Props = BaseProps & {
	justify?: "start" | "end" | "center" | "between" | "around"
	align?: "start" | "end" | "center" | "stretch"
	splitAfter?: number
}

function getJustify(value: Props["justify"]) {
	if (!value) {
		return undefined
	}

	switch (value) {
		case "end":
			return "flex-end"
		case "center":
			return "center"
		case "between":
			return "space-between"
		case "around":
			return "space-around"
		case "start":
		default:
			return "flex-start"
	}
}
function getAlign(value: Props["align"]) {
	if (!value) {
		return undefined
	}

	switch (value) {
		case "end":
			return "flex-end"
		case "center":
			return "center"
		case "stretch":
			return "stretch"
		case "start":
		default:
			return "flex-start"
	}
}

const { splitAfter, justify, align, class: className, style } = Astro.props
const { id = splitAfter ? uid() : undefined, ...attrs } = Astro.props

const safeJustify = getJustify(justify)
const safeAlign = getAlign(align)

const componentStyle = joinStyles(
	safeJustify && `justify-content: ${safeJustify}`,
	safeAlign && `align-items: ${safeAlign}`,
	style,
)

const inlineStyle =
	splitAfter &&
	`#${id}:only-child {
	inline-size: 100%;
}
#${id} > :nth-child(${splitAfter}) {
	margin-inline-end: auto;
}`
---

<Component
	id={id}
	class:list={["cluster", className]}
	style={componentStyle}
	{...attrs}
>
	<slot />
</Component>

<Show when={inlineStyle}>
	<style set:html={inlineStyle} is:global></style>
</Show>

<style>
	.cluster {
		box-sizing: border-box;
		display: flex;
		flex-wrap: wrap;
	}
</style>
