---
import type { HTMLAttributes, HTMLTag } from 'astro/types'
import { parseCssLength } from '../utils/css.js'
import type { CSSLength } from '../utils/css.js'
import { uid } from '../utils/uid.js'

export interface Props extends HTMLAttributes<'div'> {
    as?: HTMLTag
    splitAfter?: number
    recursive?: boolean
    gap?: number | CSSLength
}

const {
    as: Component = 'div',
    class: className,
    splitAfter,
    recursive,
    gap,
    ...props
} = Astro.props

const safeGap = parseCssLength(gap)

const {
    id = (safeGap || splitAfter) && uid(),
    ...attrs
} = props

const inlineStyle = id && [
    safeGap && `#${id} { gap: ${safeGap}; }`,
    splitAfter && `#${id} > :nth-child(${splitAfter}) { margin-block-end: auto; }`
].filter(Boolean).join('\n')
---

<Component data-stack={recursive ? 'recursive' : ''} id={id?.toString()} class={className} {...attrs}>
    <slot />
</Component>

{inlineStyle && (
    <style set:html={inlineStyle}></style>
)}

<style>
    [data-stack] {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    [data-stack]:not([data-stack=recursive]) > *,
    [data-stack=recursive] * {
        margin-block: 0;
    }

    [data-stack]:not([data-stack=recursive]) > * + *, 
    [data-stack=recursive] * + * {
        margin-block-start: var(--gap, 0px);
    }

    [data-stack]:only-child {
        block-size: 100%;
    }
</style>